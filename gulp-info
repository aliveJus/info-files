1. Устанавливаем node
2. Устанавливаем глобально gulp: npm i gulp -g 
3. Иницилизируем проект в папке проекта: npm init 
	 В диалоговом окне прописываем на латинице:
	 	Имя проекта
	 	Версия
	 	Описание
	 	entry point - можно не заполнять
	 	test command - можно не заполнять
	 	git repository -      заполняем если есть
	 	keywords - можно не заполнять
	 	autor - можно не заполнять
	 	license - можно не заполнять
4. Появляется в папке проекта файл package.json с данными настройками. Он является манифестом, а также содержит информацию об используемых пакетах.

5. Сохраняем пакет и версию gulp в package.json проекта:  npm gulp --save-dave  Появляется папка node_modules. В нее будут устанавливаться все модули, зависимости.
6. Создаем структуру проекта, папки: 
MyProject	
	app    // Исходники проекта
		-css
		-fonts
		-img
		-js
		-libs /*сторонние библиотеки, типа jQ*/
		-sass
		-index.html


	dist   // Тут готовый продукт после сборки. Оптимизированный сжатый и причесанный. Папка продакшена.

В корне создаем файл gulpfile.js
В нем прописываем:
	установленный модуль gulp
		var gulp = require ('gulp');

	теперь можем прописывать Таски
		gulp.task('myTask', function () {
			console.log ('Привет, я таск!')
		});
Таски можно вызывать из консоли: gulp myTask

		gulp.task('myTask', function () {
			retutn gulp.src('source-file')  // берем файлы для обработки. Можно указать на прямую или воспользоваться шаблоном globe
				
			.pipe(plugin())   // вызов команды или плагина для выполнения действий с этими файлами

			.pipe(gulp.dest('folder')) // dest = destination - путь назначения, куда мы выгружаем и указываем какую-то папку

		});		
Это вся задача галпа: 1) берем файл 2) что-то с ним делаем 3) куда-то выгружаем


             Сделаем препроцессинг SASS

1)    Устанавливаем SASS с сохранением пакета и версии в package.json

     		npm i gulp-sass --save-dev

2) Подключаем SASS в наш gulpfile. Подключение пакетов можно делать через запятую.
			var gulp = require ('gulp'),
				sass = require ('gulp-sass');

3) Идем в папку app/sass и создаем файл main.sass
	открываем в редакторе и для теста задаем фон для body
		body
			background-colour: #000

4) дописываем в gulpfile:
	    var gulp = require ('gulp'),
			sass = require ('gulp-sass');

		gulp.task('sass', function () {
			return gulp.src('app/sass/main.sass')
				.pipe(sass())
				pipe(gulp.dest('app/css'))  // тут нельзя писать файл. Только папку куда компилировать
		});


    Виды шаблонов для return gulp.src('app/sass/main.sass')
	   компиляция всех sass файлов в папке 	app/sass
    -  gulp.src('app/sass/*.sass') 

    Компиляция всех файлов во вложенных папках
    -  gulp.src('app/sass/**/*.sass') 

    Запись как массив. Знак "!" означает, что кроме этого файла
    - gulp.src('[!app/sass/main.sass, '[app/sass/**/*.sass']') 

    Выбор нескольких расширений
     -  gulp.src('app/sass/*.+(scss|sass)' 

-------------------------------------------------------------
Важно!! файлы с подчеркиванием _part.sass не учавствуют в компиляции, а добавляются только через import "part" (можно опускать нижнее подчеркивание и расширение)
-------------------------------------------------------------

   Наш выбор: -  gulp.src('app/sass/**/*.sass') 



   ===================================================
           Наблюдение за изменениями в файлах
           		    	WATCH
           		      gulp watch
   ===================================================

   var gulp = require ('gulp'),
	   sass = require ('gulp-sass');

		gulp.task('sass', function () {
			return gulp.src('app/sass/main.sass')
				.pipe(sass())
				.pipe(gulp.dest('app/css'))  
		});

		gulp.task('watch', function () {
			gulp.watch('app/sass/**/*.sass', ['sass'])  // выбираем файл или шаблон, и в квадратных скобках указываем массив Тасков, который будем выполнять
		})

	Запуск: gulp watch
Выход из Watch: cntrl + C два раза

==================================================
	   Live Reload - авто обновление браузера
	      npm install -g browser-sync
	      запуск после установки: gulp browser-sync
==================================================

Мы не будем устанавливать глобально, а установим просто в наш проект:
		  npm i browser-sync --save-dev


Идем в gulpfile:
     var gulp = require ('gulp'),
	     sass = require ('gulp-sass'),
	     browserSync = require ('browser-sync')

создаем Таск:
	 gulp.task('browser-sync', function () {
	 	browserSync ({

	 	server: {              // выбираем папку (сервер)
	 		baseDir: 'app'  //выбираем папку app
	 	},
	 	notify: false  // отключаем уведомления  
	 	});

	 });

=============================================
Изменения css на странице без ее перезагрузки
       inject 
=============================================

		.pipe (browserSync.reload({stream: true}))

теперь его надо запустить перед Watch

в квадратных скобках те параметры, которые выподняются до старта Watch
gulp.task('watch',['browser-sync','sass'], function () {  
	gulp.watch('app/sass/**/*.sass', ['sass']);
}

Важно! Когда запускаем gulp watch , то запускается brauser-sync и sass

=======================================================
			Обновление файлов JS, HTML
=======================================================

идем в app/js  и создаем файл common.js //для пользовательских функций

	$(function() {
			/*тут пользовательские функции*/
	});


Добавляем слежение за html
  	gulp.task('watch',['browser-sync','sass'], function () {  
		gulp.watch('app/sass/**/*.sass', ['sass']);
		gulp.watch('app/**/*.html', browserSync.reload); // reload - функция, которую предоставляет Browser-Sync
		gulp.watch('app/js/**/*.js', browserSync.reload); 
	}
===========================================================================
                            Оптимизация.
===========================================================================

В оптимизации нуждаются не пользовательские функции, а файлы библиотек, типа jQuery - нуждаются в сжатии


----------------------------------------------
Установка новых библиотек через Bower.io
npm -g bower
----------------------------------------------
создаем в корне файл .bowerrc

в этом файле указываем куда будем устанавливать библиотеки
	{
		"directory": "app/libs/"
	}
Для примера установим jQ
	bower i jquery magnific-popup (установка 2х библиотек)

----------------------------------------------------
       Объединение и сжатие jQuery
----------------------------------------------------

npm i gulp-concat gulp-uglifyjs --save-dev   // save-dev для сохранения версий пакетов

/*подключаем эти библиотеки*/

	concat = require('gulp-concat'),
	uglify = require('gulp-uglifyjs')

/*псоздаем Таск для сборки и сжатия всех скриптов*/
Нам нужен массив
	gulp.task('scripts', function () {
		return gulp.src([
			'app/libs/jquery/dist/jquery.min.js', // рекомендуют именно min
			'app/libs/magnific-popup/dist/magnific-popup.min.js'
		])
		.pipe(concat('libs.min.js'))
		.pipe(uglify())
		.pipe(gulp.dest('app/js')) // это папка выгрузки
	})	
	========================================================
		Подключение скриптов/библиотек 
	========================================================

	Сначала подключаются libs потом кастомные common
	<script src = "js/libs.min.js"></script>
	<script src = "js/common.js"></script>



	=========================================================
		           сжатие css файлов и их переименование
		           npm i gulp-cssnano gulp-rename --save-dev
 	=========================================================

 	Подключаем в наш gulpfile

 	cssnano = require('gulp-cssnano'),
 	rename = require('gulp-rename')

 	/*Подключаем минификацию всех css файлов*/
 		gulp.task('css-libs',['sass'], function () {  /*'css-libs' - мы так назвали*/ /* дописали sass, т.к. убрали из watch*/
 			return gulp.src('app/css/libs.css')
 			.pipe(cssnano()) //сжимаем
 			.pipe(rename({suffix: '.min'})) // добавляем к имени суффикс .min
 			.pipe(gulp.dest('app/css'))   // выгружаем все это в app/css
 		})

/* прописываем стили в html
<link rel = "stylesheet" href = "css/libs.min.css"
<link rel = "stylesheet" href = "css/main.css"
 */

/* в Watch дописываем css-libs */


gulp.task('watch',['browser-sync','css-libs', 'scripts'], function () { //sass убрали и дописали его в libs  
		gulp.watch('app/sass/**/*.sass', ['sass']);
		gulp.watch('app/**/*.html', browserSync.reload); // 
		gulp.watch('app/js/**/*.js', browserSync.reload); 
	}




====================================================
	готовим к продакшн
====================================================

пишем новый task build

	gulp.task('build', function () {
		
		var buildCss = gulp.src ([     // пишем, какие файлы будем переносить
			'app/css/main.css'
			'app/css/libs.min.css'
		]);
		.pipe(gulp.dest('dist/css'));		// пишем в какую папку выгрузить

		var buildFonts = gulp.src ('app/fonts/**/*') // выбор всех файлов и папок
		.pipe(gulp.dest('dist/fonts'));

		var buildJs = gulp.src('app/js/**/*')
		.pipe(gulp.dest('dist/js'));
	
		var  buildHtml = gulp.src('app/**/*.html')
		.pipe(gulp.dest('dist'));
	})




	/* очищаем папку dist от потрахов*/
		Устанавливаем пакет del
		npm i del --save-dev
подключаем в gupfile

		del = require('del')
/* Создаем новый таск до Watch */

	gulp.task('clean', function () {
		return del.sync('dist');    // удаление папки
	})

-----------------------------------------
	модифицируем task build
-----------------------------------------